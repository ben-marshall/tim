/*!

@page instructions ISA Instructions

@tableofcontents

@brief This page lists all of the instructions used in the ISA along with their memory layouts.

@section Layouts

There are several different instruction layout types. All instructions are either 1, 2, 3 or 4 bytes
long. The first byte always has the same layout. The first six bits are the opcode, the next two
make up the condition code. See Conditional Execution. Thus, all instructions have the following 
very general layout:

@code
Opcode | CC | Optional extra arguments.
?????? | ?? | .............................
@endcode

All instructions are packed together in memeory with no byte gaps. The only requirement is that they
are single byte-aligned. Hence a sequence of instructions such as: 3-byte, 1-byte, 2-byte, 4-byte
would be packed as below. Note a nibble is shown as one letter for conciseness.

@code
AA AA AA BB CC CC DD DD DD DD
@endcode

While the following (unpacked) 4-byte aligned sequence is invalid and its behavior unspecified:

@code
AA AA AA 00 BB 00 00 00 CC CC 00 00 DD DD DD DD
@endcode

@subsection byte1 1-Byte Instructions.

These are the simplest instructions. Usually they perform a very precise operation or collection of
operations in parts of the CPU not accessable by the rest of the instruction set. Their layout is as
follows:

@code
Opcode | CC
?????? | ??
@endcode

@subsection byte2 2-Byte instructions

Usually register to register operations for simple movement / value copying between registers.

@code
Opcode | CC | Arguments
?????? | ?? | ????????
@endcode

@subsection byte3 3-Byte instructions

Most instructions are 3 bytes in length. This includes all instructions with three register
operands.

@code
Opcode | CC | Arguments
?????? | ?? | ???????? | ????????
@endcode


@subsection byte4 4-Byte instructions

4 Byte instructions usually include 16 bits of immediate.

@code
Opcode | CC | Arguments
?????? | ?? | ???????? | ???????? | ????????
@endcode


@section conditional-execution Conditional Execution

All instructions support conditional execution. The two bits following the opcode in every
instruction are a condition code which specifies the predicate to be satisfied if the instruction is
to be executed:

-   `00` - Always execute the instruction.
-   `01` - Execute if and only if the last test was TRUE.
-   `10` - Execute if and only if the last test was FALSE.
-   `11` - Execute if and only if zero flag in the Status Register is

The result of each TEST instruction is stored in the Test Result register, and updated with each 
subsequent TEST instruction. Note that the TEST instruction itself can also be conditionally 
executed, meaning complex expressions can be built from sequences of tests.

@section instructions-list Instructions Quick Reference

Memonic               | Description
----------------------|------------------------------------------------------------------------------
@subpage  LOADR       | Load to register X from address in register Y with offset in register Z.
@subpage  LOADI       | Load to register X from address in register Y with immediate offset.
@subpage  STORI       | Store register X to address in register Y with offset in register Z.
@subpage  STORR       | Store register X to address in register Y with immediate offset.
@subpage  PUSH        | Push register X onto the top of the stack and decrement the stack pointer.
@subpage  POP         | Pop element at top of stack into register X and increment the stack pointer.
@subpage  MOVR        | Move the content of register X into register Y
@subpage  MOVI        | Move immediate I into register X
@subpage  JUMPR       | Jump to address contained within register X
@subpage  JUMPI       | Jump to address contained within instruction immediate.
@subpage  CALLR       | Call to function who's address is contained within register X
@subpage  CALLI       | Call to function who's address is contained within instruction immediate.
@subpage  RETURN      | Return from the last function call.
@subpage  TEST        | Test two general or special registers and set comparison bits.
@subpage  HALT        | Stop processing and wait to be reset.
@subpage  ANDR        | Bitwise AND two registers together.
@subpage  NANDR       | Bitwise NAND two registers together.
@subpage  ORR         | Bitwise OR two registers together.
@subpage  NORR        | Bitwise NOR two registers together.
@subpage  XORR        | Bitwise XOR two registers together.
@subpage  LSLR        | Logical shift left the bits in register X by the value in register Y.
@subpage  LSRR        | Logical shift right the bits in register X by the value in register Y.
@subpage  NOTR        | Bitwise invert the specificed register.
@subpage  ANDI        | Bitwise AND two registers together.
@subpage  NANDI       | Bitwise NAND two registers together.
@subpage  ORI         | Bitwise OR two registers together.
@subpage  NORI        | Bitwise NOR two registers together.
@subpage  XORI        | Bitwise XOR two registers together.
@subpage  LSLI        | Logical shift left the bits in register X by the immediate value
@subpage  LSRI        | Logical shift right the bits in register X by the immediate value
@subpage  IADDI       | Integer Add register X to immediate value.
@subpage  ISUBI       | Integer Subtract immediate value from register X.
@subpage  IMULI       | Integer Multiply register X by immediate value.
@subpage  IDIVI       | Integer Divide register X by immediate value.
@subpage  IASRI       | Integer Arithmetic shift register X right immediate value.
@subpage  IADDR       | Integer Add register X to register Y.
@subpage  ISUBR       | Integer Subtract register X from register Y.
@subpage  IMULR       | Integer Multiply register X by register Y.
@subpage  IDIVR       | Integer Divide register X by register Y.
@subpage  IASRR       | Integer Arithmetic shift register X right value in register Y.
@subpage  FADDI       | Floating point Add register X to immediate value.
@subpage  FSUBI       | Floating point Subtract immediate value from register X.
@subpage  FMULI       | Floating point Multiply register X by immediate value.
@subpage  FDIVI       | Floating point Divide register X by immediate value.
@subpage  FASRI       | Floating point Arithmetic shift register X right immediate value.
@subpage  FADDR       | Floating point Add register X to register Y.
@subpage  FSUBR       | Floating point Subtract register X from register Y.
@subpage  FMULR       | Floating point Multiply register X by register Y.
@subpage  FDIVR       | Floating point Divide register X by register Y.
@subpage  FASRR       | Floating point Arithmetic shift register X right value in register Y.



@page  LOADR  LOADR  

###Description

Loads a value from memory into the destination register. The address used is the summation of
the second and third operand registers. The contents of the second and third registers are treated
as unsigned 4-byte aligned numbers. The final nibble of the instruction is a byte mask used to
set which bytes are actually loaded from memory and which are discarded.

###Register Access

The LOADR instruction can use any of the general purpose registers `R0` to `R15` as either
destination or source operands.

###Memory Layout

This is a 3 byte instruction

@code
Opcode  | Condition Code |  Destination | Source 1 | Source 2
000001  |       00       |     DDDD     | RRRR     | rrrr
@endcode

### Assembly Code Examples

Note that the final byte mask is optional. If it is omitted (as in example 3) then it is assumed
to be 1111. It should be 4 characters long and only '1' or '0'.

@code
1. | LOAD $R0 $R1 $R3    1111 ; Load all bits into R0
2. | LOAD $R7 $R14 $R13  1100 ; Load the upper 16 bits into R7
3. | LOAD $R5 $R5 $R6         ; Replace R5 with the memory contents.
@endcode

@see @ref instructions-list, @ref LOADI


---

@page  LOADI  LOADI  

###Description

Loads a value into the destination register from memory. The address used is made up of the
20 bit immediate. The immediate is interpreted as a 4-byte aligned unsigned value. The LOADI
instruction does not allow byte masking like the @ref LOADR instruction does, hence it will
always load an entire word into the destination register.

###Register Access

The LOADI instruction can use any of the general purpose registers `R0` to `R15` as its
destination. It has not source operands.

###Memory Layout

This is a 4 byte instruction

@code
Opcode  | Condition Code |  Destination | Immediate            
000010  |       00       |     DDDD     | IIII IIII IIII IIII IIII
@endcode

### Assembly Code Examples

When an immediate is supplied that does not fit into 20 bits, the lower 20 bits are used and any
upper bits are discarded by the assembler.

Immediates that specify fewer than 5 bytes are padded with high order zeros to make them 20 bits
long explicitly.

@code
1. | LOAD $R0 0xFF001
2. | LOAD $R0 0xAB003
3. | LOAD $R0 0dF056
@endcode

@see @ref instructions-list, @ref LOADR


---

@page  STORI  STORI  

###Description

Stores a value from the source register into memory. The address used is made up of the
20 bit immediate. The immediate is interpreted as a 4-byte aligned unsigned value. The STORI
instruction does not allow byte masking like the @ref STORR instruction does, hence it will
always store an entire word into memory.

###Register Access

The STORI instruction can use any of the general purpose registers `R0` to `R15` as its
destination. It has not source operands.

###Memory Layout

This is a 4 byte instruction

@code
Opcode  | Condition Code |  Source | Immediate            
000011  |       00       |   DDDD  | IIII IIII IIII IIII IIII
@endcode

### Assembly Code Examples

When an immediate is supplied that does not fit into 20 bits, the lower 20 bits are used and any
upper bits are discarded by the assembler.

Immediates that specify fewer than 5 bytes are padded with high order zeros to make them 20 bits
long explicitly.

@code
1. | STORE $R0 0xFF001
2. | STORE $R0 0xAB003
3. | STORE $R0 0dF056
@endcode

@see @ref instructions-list, @ref STORR


---

@page  STORR  STORR  

###Description

Stores a value from the source register into memory. The address used is the summation of
the second and third operand registers. The contents of the second and third registers are treated
as unsigned 4-byte aligned numbers. The final nibble of the instruction is a byte mask used to
set which bytes are actually stored to memory and which are discarded.

###Register Access

The STORR instruction can use any of the general purpose registers `R0` to `R15` as either
destination or source operands.

###Memory Layout

This is a 3 byte instruction

@code
Opcode  | Condition Code |  Destination | Source 1 | Source 2
000100  |       00       |     DDDD     | RRRR     | rrrr
@endcode

### Assembly Code Examples

Note that the final byte mask is optional. If it is omitted (as in example 3) then it is assumed
to be 1111. It should be 4 characters long and only '1' or '0'.

@code
1. | STORE $R0 $R1 $R3    1111 ; Store all bits in R0
2. | STORE $R7 $R14 $R13  1100 ; Store the upper 16 bits from R7
3. | STORE $R5 $R5 $R6
@endcode

@see @ref instructions-list, @ref STORI


---

@page POP POP

###Description

Loads the top four bytes of the stack into the destination register.

###Register Access

The POP instruction can write to any register so long as the supervisor mode bit is set in
the @ref registers-sp-sr. Otherwise, it can write to any of the general purpose or temporary
registers. If it tries to write to a register is should not, it is treated as a NOP.

POP also causes the @ref registers-sp-sp register to be decremented.

###Memory Layout

This is a 2 byte instruction. The GP/SR bit determines whether the destination register is
addressing the general purpose register bank or the special purpose / temporary register bank.

@code
Opcode  | Condition Code |  Destination | GP/SR | Don't Care
000101  |       00       |     DDDD     |  1/0  | ???
@endcode

### Assembly Code Examples

@code
1. | POP $R2    ; Pop to general purpose register 2.
2. | POP $PC    ; Pop to the program counter to return from a function.
@endcode

@see @ref instructions-list, @ref PUSH


---

@page  PUSH PUSH

###Description

Push a register onto the top of the stack. 

###Register Access

The PUSH instruction may read from any register, general, special or temporary. Each instance
of the PUSH instruction will also cause the @ref registers-sp-sp register to be incremented.

###Memory Layout

This is a 2 byte instruction. The GP/SR bit determines whether the source register is
addressing the general purpose register bank or the special purpose / temporary register bank.

@code
Opcode  | Condition Code |  Source   | GP/SR | Don't Care
000110  |       00       |   DDDD    |  1/0  | ???
@endcode

### Assembly Code Examples

@code
1. | PUSH $R2    ; PUSH R2 to the top of the stack.
2. | PUSH $PC    ; PUSH the program counter to the top of the stack.
@endcode

@see @ref instructions-list, @ref POP


---


@page  MOVR   MOVR   

###Description

Coppies the contents of one register to another.

###Register Access

MOVI may write to any special, general or temporary register except the program counter.

###Memory Layout

This is a 3 byte instruction. GP/SR bits determine if the destination and source registers
index the general or special purpose register files.

@code
Opcode  | Condition Code | Destination |  Source  | GP/SR 1 | GP/SR 2 | Don't Care
000111  |       00       |    DDDD     |   ssss   |  1/0    |  1/0    | ???? ??
@endcode

### Assembly Code Examples

@code
1. | MOVR $PC $R1
2. | MOVR $T1 $R5
3. | MOVR $R6 $T5
4. | MOVR $LR $T5
@endcode

@see @ref instructions-list, @ref MOVI


---

@page  MOVI   MOVI   

###Description

Moves the value of an immediate into a register.

###Register Access

MOVI may write to any special, general or temporary register except the program counter.

###Memory Layout

This is a 4 byte instruction. GP/SR bits determine if the destination and source registers
index the general or special purpose register files.

@code
Opcode  | Condition Code | Destination | GP/SP | Immediate
000111  |       00       |    DDDD     |   I   | III IIII IIII IIII IIII
@endcode

### Assembly Code Examples

@code
1. | MOVI $R0 0xABC6
2. | MOVI $SP 0x7FFFF
@endcode

@see @ref instructions-list, @ref MOVR


---

@page  JUMPR  JUMPR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  JUMPI  JUMPI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  CALLR  CALLR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  CALLI  CALLI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  RETURN RETURN 

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  TEST   TEST   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  HALT   HALT   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ANDR   ANDR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  NANDR  NANDR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ORR    ORR    

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  NORR   NORR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  XORR   XORR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  LSLR   LSLR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  LSRR   LSRR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  NOTR   NOTR   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ANDI   ANDI   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  NANDI  NANDI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ORI    ORI    

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  NORI   NORI   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  XORI   XORI   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  LSLI   LSLI   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  LSRI   LSRI   

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IADDI  IADDI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ISUBI  ISUBI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IMULI  IMULI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IDIVI  IDIVI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---


@page  IASRI  IASRI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IADDR  IADDR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  ISUBR  ISUBR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IMULR  IMULR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  IDIVR  IDIVR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---


@page  IASRR  IASRR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FADDI  FADDI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FSUBI  FSUBI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FMULI  FMULI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FDIVI  FDIVI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---


@page  FASRI  FASRI  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FADDR  FADDR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FSUBR  FSUBR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FMULR  FMULR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

@page  FDIVR  FDIVR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---


@page  FASRR  FASRR  

###Description



###Register Access



###Memory Layout

This is a X byte instruction

 ```


```

### Assembly Code Examples

```


```

@see @ref instructions-list


---

*/
